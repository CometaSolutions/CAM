<doc>
   <members>
      <member name="M:E_CommonUtils.InvokeEventIfNotNull``1(``0,System.Action{``0})">
         <summary>
            Invokes the event if it is non-<c>null</c>.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
      </member>
      <member name="M:E_CommonUtils.InvokeAllEventHandlers``1(``0,System.Action{``0},System.Boolean)">
         <summary>
            Invokes all event handlers one by one, even if some of them throw exception.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <param name="throwExceptions">Whether this method should throw exceptions that are thrown by event handlers.</param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
         <exception cref="T:System.AggregateException">
            If <paramref name="throwExceptions" /> is <c>true</c> and any of the event handler throws an exception. The exception(s) will be given to the <see cref="T:System.AggregateException" /> constructor.
         </exception>
         <remarks>
            If <paramref name="throwExceptions" /> is <c>true</c> and first exception is thrown by last event handler, then that exception is re-thrown instead of throwing <see cref="T:System.AggregateException" />.
         </remarks>
      </member>
      <member name="M:E_CommonUtils.InvokeAllEventHandlers``1(``0,System.Action{``0},System.Exception[]@)">
         <summary>
            Invokes all event handlers one by one, even if some of them throw exception.
         </summary>
         <typeparam name="TDelegate">The type of the event.</typeparam>
         <param name="del">The value of the event field.</param>
         <param name="invoker">
            The lambda to invoke non-<c>null</c> event.
         </param>
         <param name="occurredExceptions">
            This will hold all exceptions thrown by event handlers. Will be <c>null</c> if no exceptions were thrown.
         </param>
         <returns>
            <c>true</c> if <paramref name="del" /> was non-<c>null</c>; <c>false</c> otherwise.
         </returns>
      </member>
   </members>
</doc>