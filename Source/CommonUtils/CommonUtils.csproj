<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <MinimumVisualStudioVersion>10.0</MinimumVisualStudioVersion>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{DBA22CD8-AC89-4902-8E44-F4771875E781}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>CommonUtils</RootNamespace>
    <AssemblyName>CommonUtils</AssemblyName>
    <FileAlignment>512</FileAlignment>
    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
    <DefaultLanguage>en-US</DefaultLanguage>
    <ProjectTypeGuids>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>

    <!-- .NET & Windows 8 & WPA81 -->
    <TargetFrameworkProfile Condition=" '$(Configuration)' == 'Debug' or '$(Configuration)' == 'Release' ">Profile92</TargetFrameworkProfile>
    <!-- SL5 & WPSL 8 -->
    <TargetFrameworkProfile Condition=" '$(Configuration)' == 'Debug_SL' or '$(Configuration)' == 'Release_SL' ">Profile158</TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\Output\Debug\dotNET\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>none</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\Output\Release\dotNET\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Debug_SL|AnyCPU'">
    <DebugSymbols>true</DebugSymbols>
    <OutputPath>..\..\Output\Debug\SL\</OutputPath>
    <DefineConstants>TRACE;DEBUG;SILVERLIGHT</DefineConstants>
    <DebugType>full</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <GenerateSerializationAssemblies>Off</GenerateSerializationAssemblies>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Release_SL|AnyCPU'">
    <OutputPath>..\..\Output\Release\SL\</OutputPath>
    <DefineConstants>TRACE;SILVERLIGHT</DefineConstants>
    <Optimize>true</Optimize>
    <DebugType>none</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
    <CodeAnalysisRuleSet>MinimumRecommendedRules.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(MonoBuild)' == '' and '$(Configuration)' != 'Debug_WP' and '$(Configuration)' != 'Release_WP' ">
    <DocumentationFile>$(OutputPath)$(AssemblyName).xml</DocumentationFile>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="AbstractDisposable.cs" />
    <Compile Include="ArgumentValidator.cs" />
    <Compile Include="BinaryUtils.cs" />
    <Compile Include="ComparerWrappers.cs" />
    <None Include="DelegateMultiplexer.xml" />
    <None Include="EventInvoking.xml" />
    <Compile Include="EventInvoking.il" />
    <Compile Include="Lazies.cs" />
    <Compile Include="NullableComparer.cs" />
    <Compile Include="TimeComparers.cs" />
    <Compile Include="TypeUtils.cs" />
    <Compile Include="UndoBuffer.cs" />
    <Compile Include="UsingHelper.cs" />
    <Compile Include="DelegateMultiplexer.il" />
    <Compile Include="InstancePools.cs" />
    <Compile Include="Miscellaneous.cs" />
    <Compile Include="Multiplexer.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="CollectionExtensions.cs" />
    <Compile Include="Empty.cs" />
    <Compile Include="ComparerFromFunctions.cs" />
    <Compile Include="ReferenceEqualityComparer.cs" />
    <Compile Include="SequenceEqualityComparer.cs" />
    <Compile Include="BinaryExtensions.cs" />
    <Compile Include="StringConversions.cs" />
    <Compile Include="TreeToEnumerableExtensions.cs" />
  </ItemGroup>
  <ItemGroup>
    <!-- A reference to the entire .NET Framework is automatically included -->
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\Portable\$(TargetFrameworkVersion)\Microsoft.Portable.CSharp.targets" />
  <Import Project="../../CommonBuildTools/CLR/MSBuild/TargetFramework.targets" />
  <Import Project="../../CommonBuildTools/CLR/MSBuild/MergeXMLDocs.targets" />
  <!-- From http://blogs.clariusconsulting.net/kzu/how-to-perform-regular-expression-based-replacements-on-files-with-msbuild/ (and that is based on nuget task) -->
  <!-- Extended here to support different output filename and multiple finds -->
  <!--
============================================================
            RegexTransform

Transforms the input Items parameter by evaluating the
regular expression in their Find metadata and
replacing with their ReplaceWith metadata. Optional, the
options for the regular expression evaluation can be specified.

Example input item:
        <RegexTransform Include="$(BuildRoot)Src\GlobalAssemblyInfo.cs">
            <Find>AssemblyFileVersion\(".*?"\)</Find>
            <ReplaceWith>AssemblyFileVersion("$(FileVersion)")</ReplaceWith>
            <Options>Multiline | IgnorePatternWhitespace</Options>
            <OutputPath>$(BuildRoot)Src\GlobalAssemblyInfo.cs</OutputPath>
        </RegexTransform>

Invoking the target:
    <RegexTransform Items="@(RegexTransform)" />
============================================================
-->
  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Code Type="Fragment" Language="cs"><![CDATA[
       foreach(var item in Items)
       {
         // Read item metadata
         var fileName = item.GetMetadata("FullPath");
         var finds = item.GetMetadata("Find").Split('\n');
         var replaceWiths = item.GetMetadata("ReplaceWith").Split('\n');
         var optionsValue = item.GetMetadata("Options");
         var outputFileName = item.GetMetadata("OutputPath");
         
         // Process item metadata
         if (String.IsNullOrEmpty(outputFileName))
         {
           outputFileName = fileName;
         } else if (!Path.IsPathRooted(outputFileName))
         {
           outputFileName = Path.GetFullPath(Path.Combine(fileName, outputFileName));
         }
         var options = String.IsNullOrWhiteSpace(optionsValue) ?
             RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));

         // Perform checks
         if(!File.Exists(fileName))
         {
           Log.LogError("Could not find file: {0}", fileName);
           return false;
         }
         if (finds.Length != replaceWiths.Length)
         {
           Log.LogError("Finds and replaces are of different length ({0} and {1}, respectively).", finds.Length, replaceWiths.Length);
           return false;
         }
         
         // Perform transformation
         var content = File.ReadAllText(fileName);
         for(var i = 0; i < finds.Length; ++i)
         {
           var find = finds[i];
           var replaceWith = replaceWiths[i];
           content = Regex.Replace(
             content,
             find,
             replaceWith,
             options
           );
         }
         
         // Write output
         File.WriteAllText(
           outputFileName,
           content
         );
       }
     ]]></Code>
    </Task>
  </UsingTask>
  <!-- From https://github.com/ins0mniaque/ILSupport -->
  <!-- Begin IL Support related code-->
  <PropertyGroup>
    <CompileDependsOn>
         HideILFromCompile;
         $(CompileDependsOn);
         InitializeIL;
         CoreDecompile;
         CoreCompileIL;
         MergeXMLDocs;
      </CompileDependsOn>
  </PropertyGroup>
  <Target Name="HideILFromCompile">
    <ItemGroup>
      <IL Include="@(Compile)" Condition="'%(Extension)'=='.il'" />
      <Compile Remove="@(Compile)" Condition="'%(Extension)'=='.il'" />
    </ItemGroup>
  </Target>
  <Target Name="InitializeIL">
    <PropertyGroup>
      <ILFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).il', ' ')</ILFile>
      <ILResourceFile>@(IntermediateAssembly->'%(RootDir)%(Directory)%(Filename).res', ' ')</ILResourceFile>
    </PropertyGroup>
    <!-- Transform input IL files -->
    <PropertyGroup>
      <DelegateAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</DelegateAssembly>
      <DelegateAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</DelegateAssembly>
      <EqualityComparerAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</EqualityComparerAssembly>
      <EqualityComparerAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</EqualityComparerAssembly>
      <ObjectAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</ObjectAssembly>
      <ObjectAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</ObjectAssembly>
      <ActionAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</ActionAssembly>
      <ActionAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</ActionAssembly>
      <ExtensionAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</ExtensionAssembly>
      <ExtensionAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">System.Core</ExtensionAssembly>
      <ExceptionAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</ExceptionAssembly>
      <ExceptionAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</ExceptionAssembly>
      <LinkedListAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Collections</LinkedListAssembly>
      <LinkedListAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">System</LinkedListAssembly>
      <IEnumerableAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Runtime</IEnumerableAssembly>
      <IEnumerableAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</IEnumerableAssembly>
      <EnumerableAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Linq</EnumerableAssembly>
      <EnumerableAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">System.Core</EnumerableAssembly>
      <AggregateExceptionAssembly Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">System.Threading.Tasks</AggregateExceptionAssembly>
      <AggregateExceptionAssembly Condition=" '$(TargetPlatformIdentifier)' != 'WindowsPhoneApp' ">mscorlib</AggregateExceptionAssembly>
    </PropertyGroup>
    <ItemGroup>
      <TransformedIL Include="@(IL)">
        <Find>\%24DELEGATE_ASSEMBLY\%24%0A\%24EQUALITY_COMPARER_ASSEMBLY\%24%0A\%24OBJECT_ASSEMBLY\%24%0A\%24ACTION_ASSEMBLY\%24%0A\%24EXTENSION_ASSEMBLY\%24%0A\%24EXCEPTION_ASSEMBLY\%24%0A\%24LINKED_LIST_ASSEMBLY\%24%0A\%24IENUMERABLE_ASSEMBLY\%24%0A\%24ENUMERABLE_ASSEMBLY\%24%0A\%24AGGREGATE_EXCEPTION_ASSEMBLY\%24</Find>
        <ReplaceWith>$(DelegateAssembly)%0A$(EqualityComparerAssembly)%0A$(ObjectAssembly)%0A$(ActionAssembly)%0A$(ExtensionAssembly)%0A$(ExceptionAssembly)%0A$(LinkedListAssembly)%0A$(IEnumerableAssembly)%0A$(EnumerableAssembly)%0A$(AggregateExceptionAssembly)</ReplaceWith>
        <Options>Multiline</Options>
        <OutputPath>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)%(IL.Filename)%(IL.Extension)</OutputPath>
      </TransformedIL>
    </ItemGroup>
    <RegexTransform Items="@(TransformedIL)" />
    <!-- Create item group for XML fragments -->
    <ItemGroup>
      <MergeXMLDocs_Fragments Include="@(IL)">
        <XMLDoc>%(IL.RootDir)%(IL.Directory)%(IL.Filename).xml</XMLDoc>
      </MergeXMLDocs_Fragments>
    </ItemGroup>
  </Target>
  <Target Name="CoreDecompile" Inputs="@(IntermediateAssembly)" Outputs="$(ILFile)" Condition=" Exists ( @(IntermediateAssembly) ) ">
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkSdkPath" />
    </GetFrameworkSdkPath>
    <ItemGroup Condition=" '$(OS)' != 'Unix' ">
      <MatchingILDasmFile Include="$(FrameworkSdkPath)\bin\*\ildasm.exe" />
    </ItemGroup>
    <PropertyGroup Condition=" '$(OS)' != 'Unix' ">
      <ILDasm>%(MatchingILDasmFile.Identity)</ILDasm>
      <ILDasm Condition="!Exists('$(ILDasm)')">$(FrameworkSdkPath)\bin\NETFX 4.0 Tools\ildasm.exe</ILDasm>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Unix' ">
      <ILDasm>ildasm</ILDasm>
    </PropertyGroup>
    <PropertyGroup>
      <ILDasm>"$(ILDasm)" /utf8 /nobar /linenum /output:"$(ILFile)" @(IntermediateAssembly->'"%(FullPath)"', ' ')</ILDasm>
    </PropertyGroup>
    <Exec Command="$(ILDasm)" />
    <ItemGroup>
      <FileWrites Include="$(ILFile)" />
      <FileWrites Include="$(ILResourceFile)" />
    </ItemGroup>
    <PropertyGroup>
      <ILSource>$([System.IO.File]::ReadAllText($(ILFile)))</ILSource>
      <Replacement>// method ${method} forwardref removed for IL import</Replacement>
      <Pattern>\.method [^\)]+\) cil managed forwardref[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
      <Pattern>\.method [^\)]+\) cil managed[^\a]+"extern was not given a DllImport attribute"[^}]+} // end of method (?&lt;method&gt;[^ \r\t\n]+)</Pattern>
      <ILSource>$([System.Text.RegularExpressions.Regex]::Replace($(ILSource), $(Pattern), $(Replacement)))</ILSource>
    </PropertyGroup>
    <WriteLinesToFile File="$(ILFile)" Lines="$(ILSource)" Overwrite="true" />
    <PropertyGroup>
      <ILSource />
    </PropertyGroup>
    <Delete Files="@(IntermediateAssembly)" />
  </Target>
  <Target Name="CoreCompileIL" Inputs="@(IL)" Outputs="@(IntermediateAssembly)">
    <GetFrameworkPath>
      <Output TaskParameter="Path" PropertyName="FrameworkPath" />
    </GetFrameworkPath>
    <PropertyGroup>
      <ILAsm>"$(FrameworkPath)\ilasm.exe" /nologo /quiet /highentropyva+ /output:@(IntermediateAssembly->'"%(FullPath)"', ' ')</ILAsm>
      <ILAsm Condition=" '$(FileAlignment)' != '' ">$(ILAsm) /alignment=$(FileAlignment)</ILAsm>
      <ILAsm Condition=" '$(BaseAddress)' != '' ">$(ILAsm) /base=$(BaseAddress)</ILAsm>
      <ILAsm Condition=" '$(OutputType)' == 'Library' ">$(ILAsm) /dll</ILAsm>
      <ILAsm Condition=" '$(DebugType)' == 'pdbonly' ">$(ILAsm) /pdb</ILAsm>
      <ILAsm Condition=" '$(DebugType)' == 'full' ">$(ILAsm) /debug</ILAsm>
      <ILAsm Condition=" '$(Optimize)' == 'true' ">$(ILAsm) /optimize</ILAsm>
      <ILAsm Condition=" '$(Platform)' == 'x64' ">$(ILAsm) /pe64 /x64</ILAsm>
      <ILAsm Condition=" '$(Platform)' == 'Itanium' ">$(ILAsm) /pe64 /itanium</ILAsm>
      <ILAsm Condition=" '$(AssemblyOriginatorKeyFile)' != '' ">$(ILAsm) /key:"$(AssemblyOriginatorKeyFile)"</ILAsm>
      <ILAsm Condition=" Exists ( '$(ILResourceFile)' ) ">$(ILAsm) /resource:"$(ILResourceFile)"</ILAsm>
      <ILAsm Condition=" Exists ( '$(ILFile)' ) ">$(ILAsm) "$(ILFile)"</ILAsm>
      <ILAsm Condition=" '$(TargetPlatformIdentifier)' == 'WindowsPhoneApp' ">$(ILAsm) /ssver:6.00</ILAsm>
    </PropertyGroup>
    <Exec Command="$(ILAsm) @(TransformedIL->'&quot;%(OutputPath)&quot;', ' ')" />
    <ItemGroup>
      <FileWrites Include="@(IntermediateAssembly->'%(RootDir)%(Directory)DesignTimeResolveAssemblyReferencesInput.cache', ' ')" />
    </ItemGroup>
    <Touch Files="$(ILFile)" ForceTouch="True" />
  </Target>
  <!-- End IL Support related code -->
</Project>