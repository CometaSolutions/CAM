/*
 * Copyright 2015 Stanislav Muhametsin. All rights Reserved.
 *
 * Licensed  under the  Apache License,  Version 2.0  (the "License");
 * you may not use  this file  except in  compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed  under the  License is distributed on an "AS IS" BASIS,
 * WITHOUT  WARRANTIES OR CONDITIONS  OF ANY KIND, either  express  or
 * implied.
 *
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */
#if !CAM_PHYSICAL_IS_PORTABLE
using Microsoft.Win32;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

namespace CILAssemblyManipulator.Physical
{

   /// <summary>
   /// This is class containing helper methods to run the PEVerify utility included with Microsoft SDK on assemblies (generated by this framework or something else).
   /// Main reason is to have a single, reliable piece of code to execute PEVerify with correct inputs and to verify its output.
   /// </summary>
   public static class Verification
   {
      private static readonly Lazy<String> WinSDKBinPath = new Lazy<String>( () => GetWinSDKBinFolder(), System.Threading.LazyThreadSafetyMode.ExecutionAndPublication );


      /// <summary>
      /// This method will run the PEVerify.exe and/or sn.exe utility and verify that their output is the one that appears for assemblies with no warnings nor errors.
      /// </summary>
      /// <param name="fileName">The path to assembly to verify.</param>
      /// <param name="verifyStrongName">Whether to run the sn.exe to verify the strong name of the assembly.</param>
      /// <param name="peVerifyError">This parameter will contain the output of the PEVerify.exe error, if any.</param>
      /// <param name="strongNameError">This parameter will contain the output of the sn.ee error, if any.</param>
      /// <param name="winSDKBinDir">The optional override of the Windows SDK directory. If none specified, then the directory will be deduced automatically.</param>
      /// <param name="additionalPEVerifyArguments">The optional additional arguments for PEVerify.exe.</param>
      /// <param name="additionalSNArguments">The optional additional arguments for sn.exe.</param>
      /// <returns><c>true</c> if errors are found by PEVerify.exe and/or sn.exe; <c>false</c> otherwise (if assembly is verified and appears correct and untampered).</returns>
      /// <exception cref="InvalidOperationException">If <paramref name="winSDKBinDir"/> is not specified, and automatic deduction of Windows SDK directory fails.</exception>
      /// <remarks>
      /// May throw also any exception thrown by <see cref="Process.Start(ProcessStartInfo)"/> method.
      /// </remarks>
      public static Boolean RunPEVerify(
         String fileName,
         Boolean verifyStrongName,
         out String peVerifyError,
         out String strongNameError,
         String winSDKBinDir = null,
         String additionalPEVerifyArguments = null,
         String additionalSNArguments = null
         )
      {
         peVerifyError = null;
         strongNameError = null;

         const String PEVERIFY_EXE = "PEVerify.exe";
         if ( String.IsNullOrEmpty( winSDKBinDir ) )
         {
            winSDKBinDir = WinSDKBinPath.Value;
         }

         var peVerifyPath = Path.Combine( winSDKBinDir, PEVERIFY_EXE );

         if ( File.Exists( peVerifyPath ) )
         {

            // Call PEVerify
            var startInfo = new ProcessStartInfo();
            startInfo.FileName = peVerifyPath;
            startInfo.Arguments = "/IL /MD /VERBOSE /NOLOGO /HRESULT " + additionalPEVerifyArguments + " \"" + fileName + "\"";
            startInfo.CreateNoWindow = true;
            startInfo.WorkingDirectory = Path.GetDirectoryName( fileName );// validationPath;
            startInfo.RedirectStandardOutput = true;
            startInfo.RedirectStandardError = true;
            startInfo.UseShellExecute = false;
            var process = Process.Start( startInfo );

            // First 'read to end', only then wait for exit.
            // Otherwise, might get stuck (forgot the link to StackOverflow which explained this).
            var results = process.StandardOutput.ReadToEnd();
            process.WaitForExit();

            if ( !results.StartsWith( "All Classes and Methods in " + fileName + " Verified." ) )
            {
               peVerifyError = results;
            }

            if ( verifyStrongName )
            {
               startInfo.FileName = Path.Combine( winSDKBinDir, "sn.exe" );
               if ( File.Exists( startInfo.FileName ) )
               {
                  startInfo.Arguments = "-q -vf " + additionalSNArguments + " \"" + fileName + "\"";
                  process = Process.Start( startInfo );

                  results = process.StandardOutput.ReadToEnd();
                  process.WaitForExit();

                  if ( results != null && !String.IsNullOrEmpty( results.Trim() ) )
                  {
                     strongNameError = results;
                  }
               }
               else
               {
                  throw new Exception( "The strong name utility sn.exe is not in same path as " + PEVERIFY_EXE + "." );
               }
            }
         }
         else
         {
            throw new Exception( "PEVerify file \"" + peVerifyPath + "\" does not exist." );
         }

         return peVerifyError != null || strongNameError != null;
      }

      /// <summary>
      /// This method will run PEVerify and/or sn.exe, and throw an execption if any verification errors are found.
      /// </summary>
      /// <param name="fileName">The path to assembly to verify.</param>
      /// <param name="verifyStrongName">Whether to run the sn.exe to verify the strong name of the assembly.</param>
      /// <param name="winSDKBinDir">The optional override of the Windows SDK directory. If none specified, then the directory will be deduced automatically.</param>
      /// <param name="additionalPEVerifyArguments">The optional additional arguments for PEVerify.exe.</param>
      /// <param name="additionalSNArguments">The optional additional arguments for sn.exe.</param>
      /// <exception cref="VerificationException">If the output of PEVerify and/or sn.exe does not match the one which is expected for assembly with no verification errors.</exception>
      /// <exception cref="InvalidOperationException">If <paramref name="winSDKBinDir"/> is not specified, and automatic deduction of Windows SDK directory fails.</exception>
      /// <remarks>
      /// May throw also any exception thrown by <see cref="Process.Start(ProcessStartInfo)"/> method.
      /// </remarks>
      public static void RunPEVerify(
         String fileName,
         Boolean verifyStrongName,
         String winSDKBinDir = null,
         String additionalPEVerifyArguments = null,
         String additionalSNArguments = null
         )
      {
         String peVerifyError, snError;
         if ( RunPEVerify( fileName, verifyStrongName, out peVerifyError, out snError, winSDKBinDir: winSDKBinDir, additionalPEVerifyArguments: additionalPEVerifyArguments, additionalSNArguments: additionalSNArguments ) )
         {
            var msg = peVerifyError;
            if ( String.IsNullOrEmpty( msg ) )
            {
               msg = snError;
            }
            else if ( !String.IsNullOrEmpty( snError ) )
            {
               msg += "\nIn addition, strong name validation failed: " + snError;
            }

            throw new VerificationException( msg );
         }
      }

      private static String GetWinSDKBinFolder()
      {
         String str;
         if ( !TryGetWinSDKBinFolder( out str ) )
         {
            throw new InvalidOperationException( "Failed to locate WinSDK bin path." );
         }

         return str;
      }

      private static Boolean TryGetWinSDKBinFolder( out String path )
      {
         using ( var baseKey = RegistryKey.OpenBaseKey( RegistryHive.LocalMachine, RegistryView.Registry32 ) )
         using ( var key = baseKey.OpenSubKey( @"SOFTWARE\Microsoft\Microsoft SDKs\Windows" ) )
         {
            path = null;
            foreach ( var subKeyName in key.GetSubKeyNames().OrderByDescending( s => s ) )
            {
               using ( var subKey = key.OpenSubKey( subKeyName ) )
               {
                  var names = subKey.GetSubKeyNames()
                     .OrderByDescending( s => s );
                  var suitablePath = names.FirstOrDefault( x => x.EndsWith( "-x64" ) );
                  if ( String.IsNullOrEmpty( suitablePath ) )
                  {
                     suitablePath = names.FirstOrDefault( x => x.EndsWith( "-x86" ) );
                     if ( String.IsNullOrEmpty( suitablePath ) )
                     {
                        suitablePath = names.FirstOrDefault();
                     }
                  }

                  if ( !String.IsNullOrEmpty( suitablePath ) )
                  {
                     using ( var dirInfoKey = subKey.OpenSubKey( suitablePath ) )
                     {
                        path = dirInfoKey.GetValue( "InstallationFolder", null ).ToStringSafe( null );
                     }
                  }

                  if ( path != null )
                  {
                     break;
                  }
               }
            }
         }

         return !String.IsNullOrEmpty( path );
      }

   }

   /// <summary>
   /// This exception is thrown by <see cref="Verification.RunPEVerify(string, bool, string, string, string)"/> method when verification erorrs are found.
   /// </summary>
   [Serializable]
   public class VerificationException : Exception
   {

      /// <summary>
      /// Creates a new instance of <see cref="VerificationException"/> with given errors from PEVerify.exe and sn.exe.
      /// </summary>
      /// <param name="peError">The error message from PEVerify.exe</param>
      /// <param name="snError">The error message from sn.exe.</param>
      public VerificationException( String peError, String snError )
         : this( CombinePEAndSN( peError, snError ) )
      {

      }

      /// <summary>
      /// Creates a new instance of <see cref="VerificationException"/> with given serialized information.
      /// </summary>
      /// <param name="info">The <see cref="System.Runtime.Serialization.SerializationInfo"/>.</param>
      /// <param name="ctx">The <see cref="System.Runtime.Serialization.StreamingContext"/>.</param>
      protected VerificationException( System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx )
         : base( info, ctx )
      {

      }

      /// <summary>
      /// Creates a new instance of <see cref="VerificationException"/> with given message and optional inner exception.
      /// </summary>
      /// <param name="msg">The textual message to pass to <see cref="Exception"/>.</param>
      /// <param name="inner">The inner exception to pass to <see cref="Exception"/>.</param>
      public VerificationException( String msg, Exception inner = null )
         : base( msg, inner )
      {

      }

      private static String CombinePEAndSN( String pe, String sn )
      {
         var msg = pe;
         if ( String.IsNullOrEmpty( msg ) )
         {
            msg = sn;
         }
         else if ( !String.IsNullOrEmpty( sn ) )
         {
            msg += "\nIn addition, strong name validation failed: " + sn;
         }

         return msg;
      }
   }
}
#endif
